{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","console","log","autoFocus","onBlur","onDoubleClick","Todolist","newTitle","changeTodolistTitle","id","removeTodolist","Delete","addTask","tasks","map","t","key","className","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","newValue","changeTaskTitle","removeTask","style","paddingTop","Button","filter","changeFilter","todolistId1","v1","todolistId2","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","todolistId","action","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","changeTaskTitleAC","changeTodolistTitleAC","changeTodolistFilterAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","addTodolistAC","spacing","tl","allTodolistTasks","tasksForTodolist","item","Paper","backgroundColor","rootReducer","combineReducers","stateCopy","filteredTasks","newTask","newTasks","todolistsTasks","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a8936622.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.charCode === 13) {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        console.log(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    filter: string\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = (props: PropsType) => {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    const changeTodolistTitle = (newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id)\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n\r\n                    const onClickHandler = () => {\r\n                        props.removeTask(t.id, props.id)\r\n                    }\r\n\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id)\r\n                    }\r\n\r\n                    const changeTaskTitle = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox color=\"primary\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                        <EditableSpan title={t.title} onChange={changeTaskTitle}/>\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                    onClick={onAllClickHandler}\r\n                    color=\"default\"\r\n            >All</Button>\r\n            <Button variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color=\"primary\"\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color=\"secondary\"\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n};\r\n\r\n\r\nexport default Todolist;","import {FilterValuesType, TasksStateType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodoLIstTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodoLIstFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodoLIstTitleActionType\r\n    | ChangeTodoLIstFilterActionType\r\n\r\n// const initialState: Array<TodolistType> = []\r\n\r\nexport let todolistId1 = v1();\r\nexport let todolistId2 = v1();\r\n\r\nconst initialState: Array<TodolistType> = [\r\n    {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n    {id: todolistId2, title: \"What to bye\", filter: \"all\"},\r\n]\r\n\r\ntype initialStateType = typeof initialState\r\n\r\n// меня вызовут и дадут мне стейт (почти всегда объект)\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const todolistsReducer = (state = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [\r\n                ...state,\r\n                {id: action.todolistId, title: action.title, filter: \"all\"}\r\n            ]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodoLIstTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todolistId, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType): ChangeTodoLIstFilterActionType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", id: todolistId, filter: filter}\r\n}\r\n\r\n\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType, todolistId1, todolistId2} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    isDone: boolean\r\n    todolistId: string\r\n    taskId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    title: string\r\n    taskId: string\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\n// const initialState: TasksStateType = {}\r\n\r\nconst initialState: TasksStateType = {\r\n    [todolistId1]: [\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"ReactJS\", isDone: true},\r\n        {id: v1(), title: \"Redux\", isDone: true},\r\n        {id: v1(), title: \"Axios\", isDone: false},\r\n    ],\r\n    [todolistId2]: [\r\n        {id: v1(), title: \"Milk\", isDone: true},\r\n        {id: v1(), title: \"React Book\", isDone: true}\r\n    ],\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\n// меня вызовут и дадут мне стейт (почти всегда объект)\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todolistId];\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTask = {id: v1(), title: action.title, isDone: false};\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistsTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistsTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, isDone: action.isDone}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistsTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistsTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, title: action.title}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolistId] = [];\r\n            return stateCopy;\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id];\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId)\r\n        dispatch(action)\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        const action = addTaskAC(title, todolistId)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId)\r\n        dispatch(action)\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        const action = removeTodolistAC(id)\r\n        dispatch(action)\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false)\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true)\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\", backgroundColor: \"#fafafc\"}}>\r\n                                    <Todolist key={tl.id}\r\n                                              id={tl.id}\r\n                                              title={tl.title}\r\n                                              tasks={tasksForTodolist}\r\n                                              removeTask={removeTask}\r\n                                              changeFilter={changeFilter}\r\n                                              addTask={addTask}\r\n                                              changeTaskStatus={changeStatus}\r\n                                              filter={tl.filter}\r\n                                              removeTodolist={removeTodolist}\r\n                                              changeTodolistTitle={changeTodolistTitle}\r\n                                              changeTaskTitle={changeTaskTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}