{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","model","Task","onChangeHandler","useCallback","newIsDoneValue","checked","changeTaskStatus","task","Completed","New","changeTaskTitle","newValue","onClickHandler","removeTask","className","status","Checkbox","Delete","initialState","updateTaskThunkTC","domainModel","dispatch","getState","tasks","find","t","apiModel","deadline","priority","description","startDate","then","res","action","type","updateTaskAC","Todolist","useDispatch","useEffect","setTasksAC","data","items","addTask","removeTodolist","changeTodolistTitle","newTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","map","style","paddingTop","Button","AppWithRedux","todolists","useSelector","state","item","addTaskThunkTC","removeTaskAC","removeTaskThunkTC","changeStatus","removeTodolistAC","addTodolist","todolist","addTodolistThunkTC","changeTodolistTitleAC","changeTodolistTitleThunkTC","changeTodolistFilterAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","Paper","rootReducer","combineReducers","stateCopy","filteredTasks","newTask","todoListId","newTasks","todolistsTasks","forEach","newTodolist","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.198d6e1e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"88133967-bfe7-4c18-8b37-a3c163827473\"\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string,\r\n    title: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n    id: string,\r\n    todoListId: string,\r\n    order: number,\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    // Todolists\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(\"todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(\"todo-lists\", {title: title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n    },\r\n    // Tasks\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    console.log(\"AddItemForm is called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    console.log(\"EditableSpan is called\")\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        console.log(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-api\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(((props: TaskPropsType) => {\r\n\r\n        const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked;\r\n            props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n        }, [props.changeTaskStatus, props.task.id, props.todolistId])\r\n\r\n        const changeTaskTitle = useCallback((newValue: string) => {\r\n            props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n        }, [props.changeTaskTitle, props.task.id, props.todolistId])\r\n\r\n        const onClickHandler = useCallback(() => {\r\n            props.removeTask(props.task.id, props.todolistId)\r\n        }, [props.removeTask, props.task.id, props.todolistId])\r\n\r\n        return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox color=\"primary\" onChange={onChangeHandler} checked={props.task.status === TaskStatuses.Completed}/>\r\n            <EditableSpan title={props.task.title} onChange={changeTaskTitle}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    })\r\n)","import {TasksStateType} from \"../App\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodoLIstActionType} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    task: TaskType\r\n}\r\nexport type UpdateTaskActionType = {\r\n    type: 'UPDATE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n    model: UpdateDomainTaskModelType\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    title: string\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | UpdateTaskActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodoLIstActionType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n// меня вызовут и дадут мне стейт (почти всегда объект)\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todolistId];\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state};\r\n            const newTask = action.task;\r\n            const tasks = stateCopy[newTask.todoListId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[newTask.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            let todolistsTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistsTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, ...action.model}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistsTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistsTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, title: action.title}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolist.id] = [];\r\n            return stateCopy;\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id];\r\n            return stateCopy;\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n// Action Creators\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string): UpdateTaskActionType => {\r\n    return {type: 'UPDATE-TASK', taskId, model, todolistId}\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todolistId}\r\n}\r\n// Thunks\r\nexport const fetchTasksThunkTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                dispatch(setTasksAC(res.data.items, todolistId))\r\n            })\r\n    }\r\n}\r\nexport const removeTaskThunkTC = (todolistId: string, id: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.deleteTask(todolistId, id)\r\n            .then(res => {\r\n                const action = removeTaskAC(id, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\nexport const addTaskThunkTC = (title: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.createTask(todolistId, title)\r\n            .then(res => {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const updateTaskThunkTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.log(\"task not found in the state\")\r\n            return;\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n}","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-api\";\r\nimport {FilterValuesType} from \"./state/todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksThunkTC} from \"./state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksThunkTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id)\r\n    }, [props.removeTodolist, props.id])\r\n\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props.changeFilter, props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return <Task key={t.id}\r\n                                 todolistId={props.id}\r\n                                 task={t}\r\n                                 changeTaskStatus={props.changeTaskStatus}\r\n                                 changeTaskTitle={props.changeTaskTitle}\r\n                                 removeTask={props.removeTask}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                    onClick={onAllClickHandler}\r\n                    color=\"default\"\r\n            >All</Button>\r\n            <Button variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color=\"primary\"\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color=\"secondary\"\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import {todolistsAPI, TodolistType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    todolist: TodolistType\r\n}\r\nexport type ChangeTodoLIstTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodoLIstFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type SetTodoLIstActionType = {\r\n    type: \"SET-TODOLISTS\"\r\n    todolists: Array<TodolistType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type  TodolistDomainType = TodolistType & { filter: FilterValuesType }\r\n\r\ntype ActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodoLIstTitleActionType\r\n    | ChangeTodoLIstFilterActionType\r\n    | SetTodoLIstActionType\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n// меня вызовут и дадут мне стейт (почти всегда объект)\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const todolistsReducer = (state = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            const newTodolist: TodolistDomainType = {...action.todolist, filter: \"all\"}\r\n            return [newTodolist, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            return action.todolists.map(tl => {\r\n                return {\r\n                    ...tl,\r\n                    filter: \"all\"\r\n                }\r\n            })\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (todolist: TodolistType): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', todolist}\r\n}\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodoLIstTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todolistId, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType): ChangeTodoLIstFilterActionType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", id: todolistId, filter: filter}\r\n}\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodoLIstActionType => {\r\n    return {type: \"SET-TODOLISTS\", todolists: todolists}\r\n}\r\n// Thunks\r\nexport const fetchTodolistsThunkTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistThunkTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistThunkTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleThunkTC = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(todolistId, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(todolistId, title))\r\n            })\r\n    }\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistThunkTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleThunkTC,\r\n    fetchTodolistsThunkTC,\r\n    FilterValuesType,\r\n    removeTodolistThunkTC,\r\n    TodolistDomainType\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskThunkTC, removeTaskThunkTC, updateTaskThunkTC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-api\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsThunkTC())\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskThunkTC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskThunkTC(todolistId, id))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskThunkTC(id, {status}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskThunkTC(id, {title: newTitle}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistThunkTC(id))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistThunkTC(title))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodolistTitleThunkTC(id, title))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist key={tl.id}\r\n                                              id={tl.id}\r\n                                              title={tl.title}\r\n                                              tasks={tasks[tl.id]}\r\n                                              removeTask={removeTask}\r\n                                              changeFilter={changeFilter}\r\n                                              addTask={addTask}\r\n                                              changeTaskStatus={changeStatus}\r\n                                              filter={tl.filter}\r\n                                              removeTodolist={removeTodolist}\r\n                                              changeTodolistTitle={changeTodolistTitle}\r\n                                              changeTaskTitle={changeTaskTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux\r\n\r\n\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}