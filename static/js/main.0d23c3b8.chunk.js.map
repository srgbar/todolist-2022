{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","features/Todolists/todolists-reducer.ts","features/Todolists/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/Todolist.tsx","features/Todolists/TodolistList.tsx","app/AppWithRedux.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","updateTaskThunkTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","deadline","priority","description","startDate","status","then","res","type","updateTaskAC","console","log","AddItemForm","React","memo","props","useState","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onChangeHandler","useCallback","newIsDoneValue","checked","changeTaskStatus","Completed","New","changeTaskTitle","newValue","onClickHandler","removeTask","className","Checkbox","Delete","Todolist","useDispatch","useEffect","setTasksAC","data","items","addTask","removeTodolist","changeTodolistTitle","newTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","item","addTaskThunkTC","removeTaskAC","removeTaskThunkTC","changeStatus","addTodolist","todolist","addTodolistThunkTC","changeTodolistTitleAC","changeTodolistTitleThunkTC","action","Grid","container","padding","spacing","tl","Paper","AppWithRedux","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","rootReducer","combineReducers","todoListId","stateCopy","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"uOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCuCMC,EAMAC,E,8FAtDNC,E,OAAWC,EAAMC,OAAN,aACbC,QAAS,iDARI,CACbC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2CAUNC,EAAe,WAGpB,OAAON,EAASO,IAAyB,eAHpCD,EAAe,SAKTE,GACX,OAAOR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KAN5EF,EAAe,SAQTI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAT9CJ,EAAe,SAWTI,EAAYF,GACvB,OAAOR,EAASY,IAAT,qBAAyCF,GAAM,CAACF,MAAOA,KAZzDF,EAAe,SAefO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAhBFP,EAAe,SAkBbO,EAAoBL,GAC3B,OAAOR,EAASS,KAAT,qBAA8DI,EAA9D,UAAkF,CAACL,MAAOA,KAnB5FF,EAAe,SAqBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAtBlER,EAAe,SAwBbO,EAAoBC,EAAgBC,GAC3C,OAAOf,EAASY,IAAT,qBAAmDC,EAAnD,kBAAuEC,GAAUC,K,SAiBpFjB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KC5DZ,IAAMiB,EAA0C,G,QCE1CA,EAA+B,GAkExBC,EAAoB,SAACH,EAAgBI,EAAwCL,GAAzD,OAC7B,SAACM,EAAiCC,GAE9B,IACMC,EADQD,IACKE,MAAMT,GAAYU,MAAK,SAAAC,GAAC,OAAIA,EAAEd,KAAOI,KACxD,GAAKO,EAAL,CAKA,IAAMI,EAA6B,aAC/BC,SAAUL,EAAKK,SACfC,SAAUN,EAAKM,SACfC,YAAaP,EAAKO,YAClBC,UAAWR,EAAKQ,UAChBrB,MAAOa,EAAKb,MACZsB,OAAQT,EAAKS,QACVZ,GAEPZ,EAAwBO,EAAYC,EAAQW,GACvCM,MAAK,SAACC,GACHb,EA7CY,SAACL,EAAgBC,EAAkCF,GAAnD,MACvB,CAACoB,KAAM,cAAenB,SAAQC,QAAOF,cA4CjBqB,CAAapB,EAAQI,EAAaL,YAf/CsB,QAAQC,IAAI,iC,kDCrEXC,EAAcC,IAAMC,MAAK,SAACC,GAEnCL,QAAQC,IAAI,yBAEZ,MAAwBK,mBAAS,IAAjC,mBAAKjC,EAAL,KAAYkC,EAAZ,KACA,EAAwBD,mBAAwB,MAAhD,mBAAKE,EAAL,KAAYC,EAAZ,KAEMC,EAAU,WACS,KAAjBrC,EAAMsC,QACNN,EAAMK,QAAQrC,GACdkC,EAAS,KAETE,EAAS,sBAgBjB,OAAO,gCACH,cAACG,EAAA,EAAD,CAAWC,QAAQ,WACRL,QAASA,EACTM,MAAOzC,EACP0C,SAhBS,SAACC,GACrBT,EAASS,EAAEC,cAAcH,QAgBdI,WAdW,SAACF,GACT,OAAVR,GACAC,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAUOU,MAAM,QACNC,WAAYb,IAEvB,cAACc,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAArC,SACI,cAACe,EAAA,EAAD,YCvCCC,EAAevB,IAAMC,MAAK,SAACC,GAEpCL,QAAQC,IAAI,0BAEZ,MAAgCK,oBAAS,GAAzC,mBAAOqB,EAAP,KAAiBC,EAAjB,KACA,EAA0BtB,mBAAS,IAAnC,mBAAOjC,EAAP,KAAckC,EAAd,KAiBA,OAAOoB,EACD,cAACf,EAAA,EAAD,CAAWE,MAAOzC,EAAO0C,SANX,SAACC,GACjBT,EAASS,EAAEC,cAAcH,OACzBd,QAAQC,IAAIe,EAAEC,cAAcH,QAIsBe,WAAS,EAACC,OAXvC,WACrBF,GAAY,GACZvB,EAAMU,SAAS1C,MAUb,sBAAM0D,cAjBa,WACrBH,GAAY,GACZrB,EAASF,EAAMhC,QAeb,SAAwCgC,EAAMhC,W,kBCjB3C2D,EAAO7B,IAAMC,MAAM,SAACC,GAEzB,IAAM4B,EAAkBC,uBAAY,SAAClB,GACjC,IAAImB,EAAiBnB,EAAEC,cAAcmB,QACrC/B,EAAMgC,iBAAiBhC,EAAMnB,KAAKX,GAAI4D,EAAiBxE,EAAa2E,UAAY3E,EAAa4E,IAAKlC,EAAM3B,cACzG,CAAC2B,EAAMgC,iBAAkBhC,EAAMnB,KAAKX,GAAI8B,EAAM3B,aAE3C8D,EAAkBN,uBAAY,SAACO,GACjCpC,EAAMmC,gBAAgBnC,EAAMnB,KAAKX,GAAIkE,EAAUpC,EAAM3B,cACtD,CAAC2B,EAAMmC,gBAAiBnC,EAAMnB,KAAKX,GAAI8B,EAAM3B,aAE1CgE,EAAiBR,uBAAY,WAC/B7B,EAAMsC,WAAWtC,EAAMnB,KAAKX,GAAI8B,EAAM3B,cACvC,CAAC2B,EAAMsC,WAAYtC,EAAMnB,KAAKX,GAAI8B,EAAM3B,aAE3C,OAAO,sBAAyBkE,UAAWvC,EAAMnB,KAAKS,SAAWhC,EAAa2E,UAAY,UAAY,GAA/F,UACH,cAACO,EAAA,EAAD,CAAUtB,MAAM,UAAUR,SAAUkB,EAAiBG,QAAS/B,EAAMnB,KAAKS,SAAWhC,EAAa2E,YACjG,cAACZ,EAAD,CAAcrD,MAAOgC,EAAMnB,KAAKb,MAAO0C,SAAUyB,IACjD,cAAClB,EAAA,EAAD,CAAYE,QAASkB,EAArB,SACI,cAACI,EAAA,EAAD,QAJSzC,EAAMnB,KAAKX,OCJvBwE,EAAW5C,IAAMC,MAAK,SAACC,GAEhC,IAAMrB,EAAWgE,cAEjBC,qBAAU,WJwBmB,IAACvE,EIvB1BM,GJuB0BN,EIvBC2B,EAAM9B,GJuBgB,SAACS,GACtDb,EAAsBO,GACjBkB,MAAK,SAACC,GACHb,EAPc,SAACG,EAAwBT,GAAzB,MACrB,CAACoB,KAAM,YAAaX,QAAOT,cAMXwE,CAAWrD,EAAIsD,KAAKC,MAAO1E,YIzBzC,IAEH,IAAM2E,EAAUnB,uBAAY,SAAC7D,GACzBgC,EAAMgD,QAAQhF,EAAOgC,EAAM9B,MAC5B,CAAC8B,EAAMgD,QAAShD,EAAM9B,KAEnB+E,EAAiBpB,uBAAY,WAC/B7B,EAAMiD,eAAejD,EAAM9B,MAC5B,CAAC8B,EAAMiD,eAAgBjD,EAAM9B,KAE1BgF,EAAsBrB,uBAAY,SAACsB,GACrCnD,EAAMkD,oBAAoBlD,EAAM9B,GAAIiF,KACrC,CAACnD,EAAMkD,oBAAqBlD,EAAM9B,KAE/BkF,EAAoBvB,uBAAY,kBAAM7B,EAAMqD,aAAa,MAAOrD,EAAM9B,MAAK,CAAC8B,EAAMqD,aAAcrD,EAAM9B,KACtGoF,EAAuBzB,uBAAY,kBAAM7B,EAAMqD,aAAa,SAAUrD,EAAM9B,MAAK,CAAC8B,EAAMqD,aAAcrD,EAAM9B,KAC5GqF,EAA0B1B,uBAAY,kBAAM7B,EAAMqD,aAAa,YAAarD,EAAM9B,MAAK,CAAC8B,EAAMqD,aAAcrD,EAAM9B,KAEpHsF,EAAmBxD,EAAMlB,MAS7B,MAPqB,WAAjBkB,EAAMyD,SACND,EAAmBxD,EAAMlB,MAAM2E,QAAO,SAAAzE,GAAC,OAAIA,EAAEM,SAAWhC,EAAa4E,QAEpD,cAAjBlC,EAAMyD,SACND,EAAmBxD,EAAMlB,MAAM2E,QAAO,SAAAzE,GAAC,OAAIA,EAAEM,SAAWhC,EAAa2E,cAGlE,gCACH,+BAAI,cAACZ,EAAD,CAAcrD,MAAOgC,EAAMhC,MAAO0C,SAAUwC,IAC5C,cAACjC,EAAA,EAAD,CAAYE,QAAS8B,EAArB,SACI,cAACR,EAAA,EAAD,SAGR,cAAC5C,EAAD,CAAaQ,QAAS2C,IACtB,8BAEQQ,EAAiBE,KAAI,SAAA1E,GACjB,OAAO,cAAC2C,EAAD,CACMtD,WAAY2B,EAAM9B,GAClBW,KAAMG,EACNgD,iBAAkBhC,EAAMgC,iBACxBG,gBAAiBnC,EAAMmC,gBACvBG,WAAYtC,EAAMsC,YALbtD,EAAEd,SAUhC,sBAAKyF,MAAO,CAACC,WAAY,QAAzB,UACI,cAACC,EAAA,EAAD,CAAQrD,QAA0B,QAAjBR,EAAMyD,OAAmB,WAAa,OAC/CtC,QAASiC,EACTlC,MAAM,UAFd,iBAIA,cAAC2C,EAAA,EAAD,CAAQrD,QAA0B,WAAjBR,EAAMyD,OAAsB,WAAa,OAClDtC,QAASmC,EACTpC,MAAM,UAFd,oBAKA,cAAC2C,EAAA,EAAD,CAAQrD,QAA0B,cAAjBR,EAAMyD,OAAyB,WAAa,OACrDtC,QAASoC,EACTrC,MAAM,YAFd,gCCtEC4C,EAA0B,WAEnC,IAAMC,EAAYC,aAAyD,SAAAC,GAAK,OAAIA,EAAMF,aACpFjF,EAAQkF,aAA8C,SAAAC,GAAK,OAAIA,EAAMnF,SACrEH,EAAWgE,cAEjBC,qBAAU,WACNjE,GNamC,SAACA,GACxCb,IACKyB,MAAK,SAACC,GACHb,EANP,CAACc,KAAM,gBAAiBsE,UAMOvE,EAAIsD,eMfjC,IAEH,IAAME,EAAUnB,uBAAY,SAAC7D,EAAeK,GACxCM,ELoCsB,SAACX,EAAeK,GAAhB,OAAuC,SAACM,GAClEb,EAAwBO,EAAYL,GAC/BuB,MAAK,SAACC,GACHb,EAtBP,CAACc,KAAM,WAAYZ,KAsBOW,EAAIsD,KAAKA,KAAKoB,WKvC5BC,CAAenG,EAAOK,MAChC,CAACM,IAEE2D,EAAaT,uBAAY,SAAC3D,EAAYG,GACxCM,EL0ByB,SAACN,EAAoBH,GAArB,OAAoC,SAACS,GAClEb,EAAwBO,EAAYH,GAC/BqB,MAAK,SAACC,GACHb,EAnBgB,SAACL,EAAgBD,GAAjB,MACvB,CAACoB,KAAM,cAAenB,SAAQD,cAkBd+F,CAAalG,EAAIG,QK7BrBgG,CAAkBhG,EAAYH,MACxC,CAACS,IAEE2F,EAAezC,uBAAY,SAAC3D,EAAYoB,EAAsBjB,GAChEM,EAASF,EAAkBP,EAAI,CAACoB,UAASjB,MAC1C,CAACM,IAEEwD,EAAkBN,uBAAY,SAAC3D,EAAYiF,EAAkB9E,GAC/DM,EAASF,EAAkBP,EAAI,CAACF,MAAOmF,GAAW9E,MACnD,CAACM,IAEEsE,EAAiBpB,uBAAY,SAAC3D,GNAH,IAACG,EMC9BM,GND8BN,EMCCH,ENDsB,SAACS,GAC1Db,EAA4BO,GACvBkB,MAAK,SAACC,GACHb,EApBP,CAACc,KAAM,kBAAmBvB,GAoBOG,YMD/B,CAACM,IAEE4F,EAAc1C,uBAAY,SAAC7D,GAC7BW,ENC0B,SAACX,GAAD,OAAmB,SAACW,GAClDb,EAA4BE,GACvBuB,MAAK,SAACC,GACHb,EAxBP,CAACc,KAAM,eAAgB+E,SAwBOhF,EAAIsD,KAAKA,KAAKoB,WMJhCO,CAAmBzG,MAC7B,CAACW,IAEEuE,EAAsBrB,uBAAY,SAAC3D,EAAYF,GACjDW,ENGkC,SAACN,EAAoBL,GAArB,OAAuC,SAACW,GAC9Eb,EAA4BO,EAAYL,GACnCuB,MAAK,SAACC,GACHb,EA7ByB,SAACT,EAAYF,GAAb,MAChC,CAACyB,KAAM,wBAAyBvB,KAAIF,SA4BpB0G,CAAsBrG,EAAYL,QMNtC2G,CAA2BzG,EAAIF,MACzC,CAACW,IAEE0E,EAAexB,uBAAY,SAACpB,EAAyBpC,GACvD,IAAMuG,ENxBT,CAACnF,KAAM,yBAA0BvB,GMwBQG,ENxBJoF,OMwBgBhD,GAClD9B,EAASiG,KACV,CAACjG,IAEJ,OAAO,qCACH,cAACkG,EAAA,EAAD,CAAMC,WAAS,EAACnB,MAAO,CAACoB,QAAS,QAAjC,SACI,cAAClF,EAAD,CAAaQ,QAASkE,MAE1B,cAACM,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQjB,EAAUL,KAAI,SAAAuB,GAEV,OAAO,cAACJ,EAAA,EAAD,CAAMX,MAAI,EAAV,SACH,cAACgB,EAAA,EAAD,CAAOvB,MAAO,CAACoB,QAAS,QAAxB,SACI,cAACrC,EAAD,CACUxE,GAAI+G,EAAG/G,GACPF,MAAOiH,EAAGjH,MACVc,MAAOA,EAAMmG,EAAG/G,IAChBoE,WAAYA,EACZe,aAAcA,EACdL,QAASA,EACThB,iBAAkBsC,EAClBb,OAAQwB,EAAGxB,OACXR,eAAgBA,EAChBC,oBAAqBA,EACrBf,gBAAiBA,GAXZ8C,EAAG/G,OAFH+G,EAAG/G,aC1C/BiH,MArBf,WACI,OACI,sBAAK5C,UAAU,MAAf,UACI,cAAC6C,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAACrE,EAAA,EAAD,CAAYsE,KAAK,QAAQrE,MAAM,UAAU,aAAW,OAApD,SACI,cAACsE,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAYjF,QAAQ,KAApB,uBAGA,cAACqD,EAAA,EAAD,CAAQ3C,MAAM,UAAd,wBAGR,cAACwE,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,cAAC,EAAD,U,gBCdVC,EAAcC,YAAgB,CAChC/G,MPEwB,WAAgE,IAA/DmF,EAA8D,uDAAtDzF,EAAcoG,EAAwC,uCACvF,OAAQA,EAAOnF,MACX,IAAK,cACD,OAAO,2BAAIwE,GAAX,kBAAmBW,EAAOvG,WAAa4F,EAAMW,EAAOvG,YAAYoF,QAAO,SAAAzE,GAAC,OAAIA,EAAEd,KAAO0G,EAAOtG,YAChG,IAAK,WACD,OAAO,2BAAI2F,GAAX,kBAAmBW,EAAO/F,KAAKiH,WAA/B,CAA6ClB,EAAO/F,MAApD,mBAA6DoF,EAAMW,EAAO/F,KAAKiH,gBACnF,IAAK,cACD,OAAO,2BACA7B,GADP,kBAEKW,EAAOvG,WAAa4F,EAAMW,EAAOvG,YAC7BqF,KAAI,SAAA1E,GAAC,OAAIA,EAAEd,KAAO0G,EAAOtG,OAAhB,2BAA6BU,GAAM4F,EAAOrG,OAASS,OAEzE,IAAK,eACD,OAAO,2BAAIiF,GAAX,kBAAmBW,EAAOJ,SAAStG,GAAK,KAC5C,IAAK,kBACD,IAAM6H,EAAS,eAAO9B,GAEtB,cADO8B,EAAUnB,EAAO1G,IACjB6H,EACX,IAAK,gBACD,IAAMA,EAAS,eAAO9B,GAItB,OAHAW,EAAOb,UAAUiC,SAAQ,SAAAf,GACrBc,EAAUd,EAAG/G,IAAM,MAEhB6H,EAEX,IAAK,YACD,OAAO,2BAAI9B,GAAX,kBAAmBW,EAAOvG,WAAauG,EAAO9F,QAClD,QACI,OAAOmF,IO7BfF,URD4B,WAA2E,IAA1EE,EAAyE,uDAAjEzF,EAAcoG,EAAmD,uCACtG,OAAQA,EAAOnF,MACX,IAAK,kBACD,OAAOwE,EAAMR,QAAO,SAAAwB,GAAE,OAAIA,EAAG/G,KAAO0G,EAAO1G,MAC/C,IAAK,eACD,MAAM,CAAN,2BAAY0G,EAAOJ,UAAnB,IAA6Bf,OAAQ,SAArC,mBAAgDQ,IACpD,IAAK,wBACD,OAAOA,EAAMP,KAAI,SAAAuB,GAAE,OAAIA,EAAG/G,KAAO0G,EAAO1G,GAAjB,2BAA0B+G,GAA1B,IAA8BjH,MAAO4G,EAAO5G,QAASiH,KAChF,IAAK,yBACD,OAAOhB,EAAMP,KAAI,SAAAuB,GAAE,OAAIA,EAAG/G,KAAO0G,EAAO1G,GAAjB,2BAA0B+G,GAA1B,IAA8BxB,OAAQmB,EAAOnB,SAAUwB,KAClF,IAAK,gBACD,OAAOL,EAAOb,UAAUL,KAAI,SAAAuB,GAAE,kCAASA,GAAT,IAAaxB,OAAQ,WACvD,QACI,OAAOQ,MQTNgC,EAAQC,YAAYN,EAAaO,YAAgBC,MAM9DlJ,OAAO+I,MAAQA,ECVfI,IAASC,OACL,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEFM,SAASC,eAAe,SX+HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpH,MAAK,SAAAqH,GACJA,EAAaC,gBAEdC,OAAM,SAAA3G,GACLR,QAAQQ,MAAMA,EAAM4G,c","file":"static/js/main.0d23c3b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"88133967-bfe7-4c18-8b37-a3c163827473\"\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    // Todolists\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(\"todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(\"todo-lists\", {title: title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n    },\r\n    // Tasks\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\nexport type TaskType = {\r\n    description: string,\r\n    title: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n    id: string,\r\n    todoListId: string,\r\n    order: number,\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n// меня вызовут и дадут мне стейт (почти всегда объект)\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const todolistsReducer = (state = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: \"all\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case \"SET-TODOLISTS\":\r\n            return action.todolists.map(tl => ({...tl, filter: \"all\"}))\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) =>\r\n    ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\r\n    ({type: \"CHANGE-TODOLIST-FILTER\", id, filter} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\r\n    ({type: \"SET-TODOLISTS\", todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsThunkTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n        })\r\n}\r\nexport const removeTodolistThunkTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        })\r\n}\r\nexport const addTodolistThunkTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n}\r\nexport const changeTodolistTitleThunkTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC(todolistId, title))\r\n        })\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodoLIstActionType = ReturnType<typeof setTodolistsAC>\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodoLIstActionType\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & { filter: FilterValuesType }","import {AddTodolistActionType, RemoveTodolistActionType, SetTodoLIstActionType} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n// меня вызовут и дадут мне стейт (почти всегда объект)\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todolist.id]: []}\r\n        case \"REMOVE-TODOLIST\":\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', taskId, model, todolistId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksThunkTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n        })\r\n}\r\nexport const removeTaskThunkTC = (todolistId: string, id: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, id)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(id, todolistId))\r\n        })\r\n}\r\nexport const addTaskThunkTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n}\r\nexport const updateTaskThunkTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.log(\"task not found in the state\")\r\n            return;\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then((res) => {\r\n                dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodoLIstActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    console.log(\"AddItemForm is called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    console.log(\"EditableSpan is called\")\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        console.log(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(((props: TaskPropsType) => {\r\n\r\n        const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked;\r\n            props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n        }, [props.changeTaskStatus, props.task.id, props.todolistId])\r\n\r\n        const changeTaskTitle = useCallback((newValue: string) => {\r\n            props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n        }, [props.changeTaskTitle, props.task.id, props.todolistId])\r\n\r\n        const onClickHandler = useCallback(() => {\r\n            props.removeTask(props.task.id, props.todolistId)\r\n        }, [props.removeTask, props.task.id, props.todolistId])\r\n\r\n        return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox color=\"primary\" onChange={onChangeHandler} checked={props.task.status === TaskStatuses.Completed}/>\r\n            <EditableSpan title={props.task.title} onChange={changeTaskTitle}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    })\r\n)","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterValuesType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksThunkTC} from \"../tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksThunkTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id)\r\n    }, [props.removeTodolist, props.id])\r\n\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props.changeFilter, props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return <Task key={t.id}\r\n                                 todolistId={props.id}\r\n                                 task={t}\r\n                                 changeTaskStatus={props.changeTaskStatus}\r\n                                 changeTaskTitle={props.changeTaskTitle}\r\n                                 removeTask={props.removeTask}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                    onClick={onAllClickHandler}\r\n                    color=\"default\"\r\n            >All</Button>\r\n            <Button variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color=\"primary\"\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color=\"secondary\"\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistThunkTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleThunkTC,\r\n    fetchTodolistsThunkTC,\r\n    FilterValuesType,\r\n    removeTodolistThunkTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskThunkTC, removeTaskThunkTC, TasksStateType, updateTaskThunkTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsThunkTC())\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskThunkTC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskThunkTC(todolistId, id))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskThunkTC(id, {status}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskThunkTC(id, {title: newTitle}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistThunkTC(id))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistThunkTC(title))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodolistTitleThunkTC(id, title))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist key={tl.id}\r\n                                      id={tl.id}\r\n                                      title={tl.title}\r\n                                      tasks={tasks[tl.id]}\r\n                                      removeTask={removeTask}\r\n                                      changeFilter={changeFilter}\r\n                                      addTask={addTask}\r\n                                      changeTaskStatus={changeStatus}\r\n                                      filter={tl.filter}\r\n                                      removeTodolist={removeTodolist}\r\n                                      changeTodolistTitle={changeTodolistTitle}\r\n                                      changeTaskTitle={changeTaskTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodolistsList} from \"../features/Todolists/TodolistList\";\r\n\r\nfunction AppWithRedux() {\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux\r\n","import {tasksReducer} from '../features/Todolists/tasks-reducer';\r\nimport {todolistsReducer} from '../features/Todolists/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./app/AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}