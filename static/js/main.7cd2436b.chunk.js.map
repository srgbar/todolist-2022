{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","editMode","setEditMode","console","log","autoFocus","onBlur","onDoubleClick","Todolist","newTitle","changeTodolistTitle","id","removeTodolist","addTask","tasks","map","t","key","isDone","type","newIsDoneValue","checked","changeTaskStatus","newValue","changeTaskTitle","removeTask","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","todolist","find","tl","todolistTasks","task","changeStatus","newTodolistId","allTodolistTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7cd2436b.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.charCode === 13) {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <input value={title}\r\n               onChange={onChangeHandler}\r\n               onKeyPress={onKeyPressHandler}\r\n               className={error ? \"error\" : \"\"}\r\n        />\r\n        <button onClick={addItem}>+</button>\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title);\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title);\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        console.log(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <input value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n};","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    filter: string\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = (props: PropsType) => {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    const changeTodolistTitle = (newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id)\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n            <button onClick={removeTodolist}>x</button>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n\r\n                    const onClickHandler = () => {\r\n                        props.removeTask(t.id, props.id)\r\n                    }\r\n\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id)\r\n                    }\r\n\r\n                    const changeTaskTitle = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                        <EditableSpan title={t.title} onChange={changeTaskTitle}/>\r\n                        <button onClick={onClickHandler}>x\r\n                        </button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === \"all\" ? \"active-filter\" : \"\"} onClick={onAllClickHandler}>All</button>\r\n            <button className={props.filter === \"active\" ? \"active-filter\" : \"\"} onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n};\r\n\r\n\r\nexport default Todolist;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to bye\", filter: \"all\"},\r\n    ]);\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ],\r\n    });\r\n\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        // достанем нужный массив по todolistId\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфильтрованным массивом\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        // достанем нужный массив по todolistId\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску\r\n        tasks[todolistId] = [task, ...todolistTasks]\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        // достанем нужный массив по todolistId\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдем нужную таску\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        // изменим таску если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        // достанем нужный массив по todolistId\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдем нужную таску\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        // изменим таску если она нашлась\r\n        if (task) {\r\n            task.title = newTitle;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значение которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, newTitle: string) {\r\n        const todolist = todolists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            todolist.title = newTitle;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        let newTodolistId = v1();\r\n        let newTodolist: TodolistType = {id: newTodolistId, title: title, filter: \"all\"}\r\n        setTodolists([newTodolist, ...todolists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodolistId]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodolist}/>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false)\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true)\r\n                    }\r\n\r\n                    return <Todolist key={tl.id}\r\n                                     id={tl.id}\r\n                                     title={tl.title}\r\n                                     tasks={tasksForTodolist}\r\n                                     removeTask={removeTask}\r\n                                     changeFilter={changeFilter}\r\n                                     addTask={addTask}\r\n                                     changeTaskStatus={changeStatus}\r\n                                     filter={tl.filter}\r\n                                     removeTodolist={removeTodolist}\r\n                                     changeTodolistTitle={changeTodolistTitle}\r\n                                     changeTaskTitle={changeTaskTitle}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}