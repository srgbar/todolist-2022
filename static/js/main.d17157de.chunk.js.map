{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","axios","create","baseURL","withCredentials","headers","Task","onChangeHandler","useCallback","newIsDoneValue","checked","changeTaskStatus","task","id","Completed","New","todolistId","changeTaskTitle","newValue","onClickHandler","removeTask","className","status","Checkbox","Delete","Todolist","addTask","removeTodolist","changeTodolistTitle","newTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","map","style","paddingTop","Button","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","action","type","addTaskAC","taskId","removeTaskAC","changeStatus","changeTaskStatusAC","changeTaskTitleAC","addTodolist","v1","addTodolistAC","changeTodolistTitleAC","changeTodolistFilterAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","rootReducer","combineReducers","stateCopy","filteredTasks","newTask","todoListId","description","startDate","deadline","addedDate","order","priority","Low","newTasks","todolistsTasks","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d17157de.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"88133967-bfe7-4c18-8b37-a3c163827473\"\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string,\r\n    title: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n    id: string,\r\n    todoListId: string,\r\n    order: number,\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport const todolistsApi = {\r\n    // Todolists\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(\"todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(\"todo-lists\", {title: title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n    },\r\n    // Tasks\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    console.log(\"AddItemForm is called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    console.log(\"EditableSpan is called\")\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        console.log(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-api\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(((props: TaskPropsType) => {\r\n\r\n        const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked;\r\n            props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n        }, [props.changeTaskStatus, props.task.id, props.todolistId])\r\n\r\n        const changeTaskTitle = useCallback((newValue: string) => {\r\n            props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n        }, [props.changeTaskTitle, props.task.id, props.todolistId])\r\n\r\n        const onClickHandler = useCallback(() => {\r\n            props.removeTask(props.task.id, props.todolistId)\r\n        }, [props.removeTask, props.task.id, props.todolistId])\r\n\r\n        return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox color=\"primary\" onChange={onChangeHandler} checked={props.task.status === TaskStatuses.Completed}/>\r\n            <EditableSpan title={props.task.title} onChange={changeTaskTitle}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    })\r\n)","import React, {useCallback} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-api\";\r\nimport {FilterValuesType} from \"./state/todolists-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    console.log(\"Todolist is called\")\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id)\r\n    }, [props.removeTodolist, props.id])\r\n\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props.changeFilter, props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return <Task key={t.id}\r\n                                 todolistId={props.id}\r\n                                 task={t}\r\n                                 changeTaskStatus={props.changeTaskStatus}\r\n                                 changeTaskTitle={props.changeTaskTitle}\r\n                                 removeTask={props.removeTask}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                    onClick={onAllClickHandler}\r\n                    color=\"default\"\r\n            >All</Button>\r\n            <Button variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color=\"primary\"\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color=\"secondary\"\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import {v1} from \"uuid\";\r\nimport {TodolistType} from \"../api/todolists-api\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodoLIstTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodoLIstFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type  TodolistDomainType = TodolistType & { filter: FilterValuesType }\r\n\r\ntype ActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodoLIstTitleActionType\r\n    | ChangeTodoLIstFilterActionType\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n// меня вызовут и дадут мне стейт (почти всегда объект)\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const todolistsReducer = (state = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [\r\n                ...state,\r\n                {id: action.todolistId, title: action.title, filter: \"all\", addedDate: \"\", order: 0}\r\n            ]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): ChangeTodoLIstTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todolistId, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType): ChangeTodoLIstFilterActionType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", id: todolistId, filter: filter}\r\n}\r\n\r\n\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses} from \"../api/todolists-api\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    status: TaskStatuses\r\n    todolistId: string\r\n    taskId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    title: string\r\n    taskId: string\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n// меня вызовут и дадут мне стейт (почти всегда объект)\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todolistId];\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTask = {\r\n                id: v1(),\r\n                title: action.title,\r\n                status: TaskStatuses.New,\r\n                todoListId: action.todolistId,\r\n                description: \"\",\r\n                startDate: \"\",\r\n                deadline: \"\",\r\n                addedDate: \"\",\r\n                order: 0,\r\n                priority: TaskPriorities.Low\r\n            };\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistsTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistsTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, status: action.status}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistsTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistsTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, title: action.title}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolistId] = [];\r\n            return stateCopy;\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id];\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, status, todolistId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    FilterValuesType,\r\n    removeTodolistAC,\r\n    TodolistDomainType\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-api\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const action = addTaskAC(title, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const action = removeTaskAC(id, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        const action = changeTaskStatusAC(id, status, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const action = removeTodolistAC(id)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        const action = changeTodolistTitleAC(id, title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist key={tl.id}\r\n                                              id={tl.id}\r\n                                              title={tl.title}\r\n                                              tasks={tasks[tl.id]}\r\n                                              removeTask={removeTask}\r\n                                              changeFilter={changeFilter}\r\n                                              addTask={addTask}\r\n                                              changeTaskStatus={changeStatus}\r\n                                              filter={tl.filter}\r\n                                              removeTodolist={removeTodolist}\r\n                                              changeTodolistTitle={changeTodolistTitle}\r\n                                              changeTaskTitle={changeTaskTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}