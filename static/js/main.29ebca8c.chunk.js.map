{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/Todolists/tasks-reducer.ts","features/Todolists/todolists-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/Todolist.tsx","features/Todolists/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","status","error","setAppErrorAC","type","setAppStatusAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","updateTaskThunkTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","priority","description","startDate","then","res","resultCode","updateTaskAC","catch","console","log","rootReducer","combineReducers","state","action","filter","todoListId","map","todolist","stateCopy","todolists","forEach","tl","entityStatus","app","store","createStore","applyMiddleware","thunkMiddleware","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onChangeHandler","useCallback","newIsDoneValue","checked","changeTaskStatus","Completed","New","changeTaskTitle","newValue","onClickHandler","removeTask","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","setTasksAC","items","addTask","removeTodolist","changeTodolistTitle","newTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","style","paddingTop","Button","TodolistsList","useSelector","item","addTaskThunkTC","removeTaskAC","removeTaskThunkTC","changeStatus","removeTodolistAC","addTodolist","addTodolistThunkTC","changeTodolistTitleAC","changeTodolistTitleThunkTC","Grid","container","padding","spacing","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29ebca8c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppStart is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"88133967-bfe7-4c18-8b37-a3c163827473\"\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    // Todolists\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(\"todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(\"todo-lists\", {title: title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n    },\r\n    // Tasks\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\nexport type TaskType = {\r\n    description: string,\r\n    title: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n    id: string,\r\n    todoListId: string,\r\n    order: number,\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n","const initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    // error: \"Error message 😠_😠_😠\" as string | null\r\n    error: null as string | null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setAppErrorAC = (error: string | null) => ({type: \"APP/SET-ERROR\", error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: \"APP/SET-STATUS\", status} as const)\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error occurred\"))\r\n    }\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: AxiosError, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : \"Some error occurred\"))\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, SetTodoLIstActionType} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    setAppErrorAC,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType,\r\n} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n// меня вызовут и дадут мне стейт (почти всегда объект)\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todolist.id]: []}\r\n        case \"REMOVE-TODOLIST\":\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', taskId, model, todolistId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksThunkTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\nexport const removeTaskThunkTC = (todolistId: string, id: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, id)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(id, todolistId))\r\n        })\r\n}\r\nexport const addTaskThunkTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskThunkTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.log(\"task not found in the state\")\r\n            return;\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodoLIstActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n// меня вызовут и дадут мне стейт (почти всегда объект)\r\n// и инструкцию (action, тоже объект)\r\n// согласно прописаному type в этом action (инструкции) я поменяю state\r\nexport const todolistsReducer = (state = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: \"all\", entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case \"SET-TODOLISTS\":\r\n            return action.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) =>\r\n    ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\r\n    ({type: \"CHANGE-TODOLIST-FILTER\", id, filter} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) =>\r\n    ({type: \"CHANGE-TODOLIST-ENTITY-STATUS\", id, status} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\r\n    ({type: \"SET-TODOLISTS\", todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsThunkTC = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\nexport const removeTodolistThunkTC = (todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId,\"loading\"))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\nexport const addTodolistThunkTC = (title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\nexport const changeTodolistTitleThunkTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC(todolistId, title))\r\n        })\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodoLIstActionType = ReturnType<typeof setTodolistsAC>\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodoLIstActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>","import {tasksReducer} from '../features/Todolists/tasks-reducer';\r\nimport {todolistsReducer} from '../features/Todolists/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n\r\n    console.log(\"AddItemForm is called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    console.log(\"EditableSpan is called\")\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        console.log(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo(((props: TaskPropsType) => {\r\n\r\n        const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked;\r\n            props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n        }, [props.changeTaskStatus, props.task.id, props.todolistId])\r\n\r\n        const changeTaskTitle = useCallback((newValue: string) => {\r\n            props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n        }, [props.changeTaskTitle, props.task.id, props.todolistId])\r\n\r\n        const onClickHandler = useCallback(() => {\r\n            props.removeTask(props.task.id, props.todolistId)\r\n        }, [props.removeTask, props.task.id, props.todolistId])\r\n\r\n        return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox color=\"primary\" onChange={onChangeHandler} checked={props.task.status === TaskStatuses.Completed}/>\r\n            <EditableSpan title={props.task.title} onChange={changeTaskTitle}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    })\r\n)","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksThunkTC} from \"../tasks-reducer\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {Button, IconButton} from \"@mui/material\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        dispatch(fetchTasksThunkTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }, [props.removeTodolist, props.todolist.id])\r\n\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, newTitle)\r\n    }, [props.changeTodolistTitle, props.todolist.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.todolist.id), [props.changeFilter, props.todolist.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.todolist.id), [props.changeFilter, props.todolist.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.todolist.id), [props.changeFilter, props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return <Task key={t.id}\r\n                                 todolistId={props.todolist.id}\r\n                                 task={t}\r\n                                 changeTaskStatus={props.changeTaskStatus}\r\n                                 changeTaskTitle={props.changeTaskTitle}\r\n                                 removeTask={props.removeTask}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.todolist.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                    onClick={onAllClickHandler}\r\n                    // color=\"default\"\r\n            >All</Button>\r\n            <Button variant={props.todolist.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color=\"primary\"\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color=\"secondary\"\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistThunkTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleThunkTC,\r\n    fetchTodolistsThunkTC,\r\n    FilterValuesType,\r\n    removeTodolistThunkTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskThunkTC, removeTaskThunkTC, TasksStateType, updateTaskThunkTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistsThunkTC())\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskThunkTC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskThunkTC(todolistId, id))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskThunkTC(id, {status}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskThunkTC(id, {title: newTitle}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistThunkTC(id))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistThunkTC(title))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodolistTitleThunkTC(id, title))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={tasks[tl.id]}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    // const [open, setOpen] = useState(true);\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    const isOpen = error != null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {TodolistsList} from \"../features/Todolists/TodolistList\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from \"@mui/material\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList demo={demo}/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}